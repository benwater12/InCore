{
    "dataType":"num",
    "projectType":"clustering",
    "algoName":"in_dbscan",
    "description": "Perform DBSCAN clustering from vector array or distance matrix. DBSCAN - Density-Based Spatial Clustering of Applications with Noise. Finds core samples of high density and expands clusters from them. Good for data which contains clusters of similar density.",
    "lib":"sklearn",
    "param":[
        {
            "name":"auto_eps",
            "description":"Let algorithm decides the eps or not. If set to True, then the parameter eps will be ignored",
            "type":"bool",
            "default":1
        },
        {
            "name":"eps",
            "description":"The maximum distance between two samples for one to be considered as in the neighborhood of the other. This is not a maximum bound on the distances of points within a cluster. This is the most important DBSCAN parameter to choose appropriately for your data set and distance function.",
            "type":"float",
            "upperBound":10000,
            "lowerBound":0.1,
            "default":0.5
        },
        {
            "name":"auto_min_samples",
            "description":"Let algorithm decides the min_samples or not. If set to True, then the parameter min_samples will be ignored",
            "type":"bool",
            "default":1
        },
        {
            "name":"min_samples",
            "description":"The number of samples (or total weight) in a neighborhood for a point to be considered as a core point. This includes the point itself.",
            "type":"int",
            "upperBound":10000,
            "lowerBound":1,
            "default":10
        },
        {
            "name":"metric",
            "description":"The metric to use when calculating distance between instances in a feature array",
            "type":"enum",
            "list":["cityblock", "cosine", "euclidean", "l1", "l2", "manhattan","braycurtis", "canberra", "chebyshev", "correlation", "dice", "hamming", "jaccard", "kulsinski", "mahalanobis", "minkowski", "rogerstanimoto", "russellrao", "seuclidean", "sokalmichener", "sokalsneath", "sqeuclidean", "yule"],
            "default":"euclidean"
        },
        {
            "name":"algorithm",
            "description":"The algorithm to be used by the NearestNeighbors module to compute pointwise distances and find nearest neighbors.",
            "type":"enum",
            "list":["auto","ball_tree","kd_tree","brute"],
            "default":"auto"
        },
        {
            "name":"leaf_size",
            "description":"Leaf size passed to BallTree or cKDTree. This can affect the speed of the construction and query, as well as the memory required to store the tree. The optimal value depends on the nature of the problem.",
            "type":"int",
            "upperBound":100,
            "lowerBound":2,
            "default":30
        }
    ],
    "input":[
        {
            "name": "X",
            "description": "input data",
            "type":"float",
            "amount":"multiple"
        }
    ],
    "output":[
    ]
}