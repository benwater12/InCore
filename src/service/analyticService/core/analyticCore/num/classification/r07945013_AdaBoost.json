{
    "dataType":"num",
    "projectType":"classification",
    "algoName":"r07945013_AdaBoost",
    "description": "An AdaBoost [1] classifier is a meta-estimator that begins by fitting a classifier on the original dataset and then fits additional copies of the classifier on the same dataset but where the weights of incorrectly classified instances are adjusted such that subsequent classifiers focus more on difficult cases.    This class implements the algorithm known as AdaBoost-SAMME [2].",
    "lib":"sklearn",
    "param":[
      {
        "name": "n_estimators",
        "description": "The maximum number of estimators at which boosting is terminated. In case of perfect fit, the learning procedure is stopped early.",
        "type": "int",
        "upperBound": 1000,
        "lowerBound": 1,
        "default": 50
      },
      {
        "name": "random_state",
        "description": "If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by np.random.",
        "type": "int",
        "upperBound": 100,
        "lowerBound": 0,
        "default": 0
      },
      {
        "name":"learning_rate",
        "description":"Learning rate shrinks the contribution of each classifier by learning_rate. There is a trade-off between learning_rate and n_estimators.",
        "type":"float",
        "upperBound":5,
        "lowerBound":0,
        "default":1
      },
      {
        "name": "algorithm",
        "description": "If ‘SAMME.R’ then use the SAMME.R real boosting algorithm. base_estimator must support calculation of class probabilities. If ‘SAMME’ then use the SAMME discrete boosting algorithm. The SAMME.R algorithm typically converges faster than SAMME, achieving a lower test error with fewer boosting iterations.",
        "type": "enum",
        "list": [ "SAMME.R", "SAMME" ],
        "default": "SAMME.R"
      }
    ],
    "input":[
        {
            "name": "X",
            "description": "input data",
            "type":"float",
            "amount":"multiple"
        }
    ],
    "output":[
        {
            "name": "Y",
            "description": "output data",
            "type":"classifiable"
        }
    ],
    "metric":[
        "cross_entropy"
    ]
}