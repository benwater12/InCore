{
    "dataType": "num",
    "projectType": "classification",
    "algoName": "r08525098_randomForest",
    "description": "A random forest is a meta estimator that fits a number of decision tree classifiers on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting.",
    "lib": "sklearn",
    "param": [
        {
          "name": "bootstrap",
          "description": "Whether bootstrap samples are used when building trees. If False, the whole datset is used to build each tree.",
          "type": "bool",
          "default": 1
        },
        {
          "name": "oob_score",
          "description": "Whether to use out-of-bag samples to estimate the generalization accuracy.",
          "type": "bool",
          "default": 0
        },
        {
          "name": "n_estimators",
          "description": "The number of trees in the forest.",
          "type": "int",
          "upperBound": 200,
          "lowerBound": 10,
          "default": 100
        },
        {
          "name": "criterion",
          "description": "The function to measure the quality of a split. Supported criteria are “gini” for the Gini impurity and “entropy” for the information gain. Note: this parameter is tree-specific.",
          "type": "enum",
          "list": [ "gini", "entropy" ],
          "default": "gini"
        },
        {
          "name": "max_depth",
          "description": "The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.",
          "type": "int",
          "upperBound": 200,
          "lowerBound": 1,
          "default": 10
        },
        {
          "name": "max_features",
          "description": "The number of features to consider when looking for the best split",
          "type": "enum",
          "list": [ "auto", "sqrt", "log2" ],
          "default": "auto"
        },
        {
          "name": "min_samples_split",
          "description": "The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.",
          "type": "int",
          "upperBound": 100,
          "lowerBound": 2,
          "default": 2
        },
        {
          "name": "min_samples_leaf",
          "description": "The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least min_samples_leaf training samples in each of the left and right branches. This may have the effect of smoothing the model, especially in regression.",
          "type": "int",
          "upperBound": 100,
          "lowerBound": 1,
          "default": 1
        },
        {
          "name": "min_weight_fraction_leaf",
          "description": "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided.",
          "type": "float",
          "upperBound": 1,
          "lowerBound": 0,
          "default": 0
        },
        {
          "name": "min_impurity_split",
          "description": "Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf.",
          "type": "float",
          "upperBound": 1,
          "lowerBound": 0,
          "default": 1e-7
        }
  ],
    "input": [
        {
          "name": "X",
          "description": "input data",
          "type": "float",
          "amount": "multiple"
        }
        ],
    "output": [
        {
          "name": "Y",
          "description": "output data",
          "type": "classifiable"
        }
        ]
}